https://github.com/JoannaDemo/GitRepoDoCwiczen.git

Systemy kontroli wersji - uzasadnienie:

1. Wspolna praca programistow nad projektem
2. Wersjonowanie
3. Kopia zapasowa
4. Automatyzacja tworzenia oprogramowania
5. Historia zmian

Podzial systemow kontorli wersji:
1. Lokalne (np. SCCS, RCS)
2. Scentarlizowane (np. Subversion)
3. Rozproszone (np. Git, Mercurial)https://github.com/JoannaDemo/GitRepoDoCwiczen.git

Systemy kontroli wersji - uzasadnienie:

1. Wspolna praca programistow nad projektem
2. Wersjonowanie
3. Kopia zapasowa
4. Automatyzacja tworzenia oprogramowania
5. Historia zmian

Podzial systemow kontorli wersji:
1. Lokalne (np. SCCS, RCS)
2. Scentarlizowane (np. Subversion)
3. Rozproszone (np. Git, Mercurial)

Zalety Gita:
1. Niemal kazda operacja jest lokalna
2. Mechanizmy spojnosci danych
3. Zapisywanie migawek (snapsshots)

Instalacja:

sudo apt-get update
sudo apt-get install git
git init
git init <PATH>

Konfguracja (dodanie danych, na ktorych dzialam):

git config 		// dla repozytorium lokalnego; dane zapisze w <repo_path>/.git/config
git config --global 	// dane do katalogu domowego uzytkownika; do pliku ~/.gitconfig
git config --system 	// ustawienie systemowe; do pliku /etc/gitconfig



Trzy stany:
1. Working Directory - Katalog, w ktorym zalozylismy repozytorium; dwa rodzje plikow: sledzone(tracked) i niesledzone(untracked)
2. Staged Snapshot - Indeks wskazujacy na pliki, ktore sa "kandydatami" przyszlego commita. Pozwala na przygotowanie zestawu zmian, ktore zostana dodane do repozytorium
3. Commit History - Lista wszystkich commitow, dodanych do repozytoriumm wraz z innymi metadanymi. 


git log - sprawdzenie Commit History

Skladnia commita:
Metadane: - commit message + commiter + commit date + author + author date
Hash identyfikacyjny - commit_id, np. 22265fsfdxgdgd825853656dg6826dg
Drzewo plikow - tree
Rodzic(-e) - parents 


Drzewo commitow - kazdy commit moze posiadac jednego lub wiecej rodzicow i mozna to pokazac w formie tree

Dodawanie/usuwanie plikow (przeplyw miedzy Working Directory a Staged Snapshot):

git add
git rm = rm + git add

Dodawanie usuwanie plikow (przeplyw miedzy Staged Snapshot a Commit History):
git commit
git reset --soft


git status - sprawdzenie statusu repozytorium (roznice, synchornizacja, aktualny stan, komendy)

Przechodzenie miedzy commitami:
git checkout - przywrocenie stanu do biezacego commita
git checkout - przywrocenie stanu do wybranego commita, brancha
git checkout <plik> - przywrocenie do wersji konkretnego pliku do biezacego commita

Galezie pozwalaja jednoczesna prace nad wieloma funkcjonalnosciami.
Najczesciej:
- master - stabilne wersje produktu
- dev - najnowsze zmiany

Galezie lokalne:
git branch <branch> - tworzenie nowej
git checkout <branch> - przejdz na galaz
git branch --list - lista dostepnych galezi
git branch -d <branch> - usun

git checkout - b <branch> - tworzy i przechodzi, jak git branch + git checkout

git diff - porownanuie roznic, cale repozytorium
git diff <plik> - wybrany plik
git diff <referencja> - wybrana referencja

Pobieranie repo:

git clone <protokol>://<adres repo> <katalog docelowy>

Protokoly:
- file
- SSH
- git
- http(s)

Repozytorium zdalne:
git fetch - odswiezenie statusow plikow z repozytorium zdalnego
git merge - dociaganie zmian
git push - wypychanie zmian
git pull - odswiezanie statusu oraz dociaganie zmian
 
git pull = git fetch + git merge - odswiezenie statusow i dociagniecie zmian naraz
 
Galezie zdalne:
 
git checkout -b <branch> - tworzenie galezi lokalnej 
git push --set-upstream origin <branch> - tworzenie galezi zdalnej + wypchniecie zmian + polaczenie z galezia lokalna 
git branch -r - lista galezi w repozytorium
Usuwanie galezi zdalnej:
git branch -d <branch> - 1. usuwanie galezi lokalnie
git push origin :<branch> 2. usuwanie galezi zdalnie

git init
git clone
git config
git add
git rm
git branch 
git commit
git status
git diff
git log
git reset
git checkout
git pull
git push
git fetch
git merge

-----------------------------------------------------------------------------------------------------------------------------------------------------

Referencja:

- odnosnik zawierajacy hash commitu
- znajduje sie w pliku w katalogu .git
- Dostepne referencje:
	- nazwa galezi - wskazuje na commit znajdujacy sie na "czubku" (tip) - jest to ostatni dodany commit
	- etykieta (tag) - wskazuje na commit, do ktorego zostala przypieta etykieta
	- remote - wskazuje na commit w zdalnym repozytorium
	- naglowek (HEAD) - wskazuje na commit na ktorym aktualnie pracujemy
	
Rodzje referencji: 
1. bezposrednia 
			cat head/master
			6862amnjsfn2356dnhsgfnhj141575afca
2. symboliczna:	
			cat remotes/origin/HEAD
			ref: refs/remotes/orgin/master
			
Naglowek (HEAD)

- Referencja symboliczna: cat .git/HEAD
			   ref: refs/heads/master
			   
- wskazuje na referencje, na ktorej pracuje w danej chwili:
	- ostatni commit galezi - git checkout <galaz>
	- konkretny hash commitu - git checkout <tag> lub git checkout <commit> (detached mode)
	
HEAD - referencja:
- przez HEAD mozna odwolywac sie do rodzicow commita:
	- HEAD~n - cofniecie o n commitow
	- HEAD^x - cofniecie do rodzica nr x
	
git checkout <commit> - przelacza naglowek na wybrany commit
git checkout <referencja> - przelacza naglowek na wybrana referencje
git merge - laczy galezie; tworzy nowy commit z 2 rodzicami; odtwarza po kolei dokonane zmiany z dolaczanej galezi

git merge - fast forward:
- gdy galezie sie nie rozdzielaja, git merge uzyje "fast-forward" i nie utworzy nowego commitu
- gdy na galezi, do ktorej dociagamy zmiany powstaja commity, zostanie utworzony nowy commit z 2 rodzicami





