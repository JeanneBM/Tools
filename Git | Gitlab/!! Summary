https://github.com/JoannaDemo/GitRepoDoCwiczen.git

Systemy kontroli wersji - uzasadnienie:

1. Wspolna praca programistow nad projektem
2. Wersjonowanie
3. Kopia zapasowa
4. Automatyzacja tworzenia oprogramowania
5. Historia zmian

Podzial systemow kontorli wersji:
1. Lokalne (np. SCCS, RCS)
2. Scentarlizowane (np. Subversion)
3. Rozproszone (np. Git, Mercurial)https://github.com/JoannaDemo/GitRepoDoCwiczen.git

Systemy kontroli wersji - uzasadnienie:

1. Wspolna praca programistow nad projektem
2. Wersjonowanie
3. Kopia zapasowa
4. Automatyzacja tworzenia oprogramowania
5. Historia zmian

Podzial systemow kontorli wersji:
1. Lokalne (np. SCCS, RCS)
2. Scentarlizowane (np. Subversion)
3. Rozproszone (np. Git, Mercurial)

Zalety Gita:
1. Niemal kazda operacja jest lokalna
2. Mechanizmy spojnosci danych
3. Zapisywanie migawek (snapsshots)

Instalacja:

sudo apt-get update
sudo apt-get install git
git init
git init <PATH>

Konfguracja (dodanie danych, na ktorych dzialam):

git config 		// dla repozytorium lokalnego; dane zapisze w <repo_path>/.git/config
git config --global 	// dane do katalogu domowego uzytkownika; do pliku ~/.gitconfig
git config --system 	// ustawienie systemowe; do pliku /etc/gitconfig



Trzy stany:
1. Working Directory - Katalog, w ktorym zalozylismy repozytorium; dwa rodzje plikow: sledzone(tracked) i niesledzone(untracked)
2. Staged Snapshot - Indeks wskazujacy na pliki, ktore sa "kandydatami" przyszlego commita. Pozwala na przygotowanie zestawu zmian, ktore zostana dodane do repozytorium
3. Commit History - Lista wszystkich commitow, dodanych do repozytoriumm wraz z innymi metadanymi. 


git log - sprawdzenie Commit History

Skladnia commita:
Metadane: - commit message + commiter + commit date + author + author date
Hash identyfikacyjny - commit_id, np. 22265fsfdxgdgd825853656dg6826dg
Drzewo plikow - tree
Rodzic(-e) - parents 


Drzewo commitow - kazdy commit moze posiadac jednego lub wiecej rodzicow i mozna to pokazac w formie tree

Dodawanie/usuwanie plikow (przeplyw miedzy Working Directory a Staged Snapshot):

git add
git rm = rm + git add

Dodawanie usuwanie plikow (przeplyw miedzy Staged Snapshot a Commit History):
git commit
git reset --soft


git status - sprawdzenie statusu repozytorium (roznice, synchornizacja, aktualny stan, komendy)

Przechodzenie miedzy commitami:
git checkout - przywrocenie stanu do biezacego commita
git checkout - przywrocenie stanu do wybranego commita, brancha
git checkout <plik> - przywrocenie do wersji konkretnego pliku do biezacego commita

Galezie pozwalaja jednoczesna prace nad wieloma funkcjonalnosciami.
Najczesciej:
- master - stabilne wersje produktu
- dev - najnowsze zmiany

Galezie lokalne:
git branch <branch> - tworzenie nowej
git checkout <branch> - przejdz na galaz
git branch --list - lista dostepnych galezi
git branch -d <branch> - usun

git checkout - b <branch> - tworzy i przechodzi, jak git branch + git checkout

git diff - porownanuie roznic, cale repozytorium
git diff <plik> - wybrany plik
git diff <referencja> - wybrana referencja

Pobieranie repo:

git clone <protokol>://<adres repo> <katalog docelowy>

Protokoly:
- file
- SSH
- git
- http(s)

Repozytorium zdalne:
git fetch - odswiezenie statusow plikow z repozytorium zdalnego
git merge - dociaganie zmian
git push - wypychanie zmian
git pull - odswiezanie statusu oraz dociaganie zmian
 
git pull = git fetch + git merge - odswiezenie statusow i dociagniecie zmian naraz
 
Galezie zdalne:
 
git checkout -b <branch> - tworzenie galezi lokalnej 
git push --set-upstream origin <branch> - tworzenie galezi zdalnej + wypchniecie zmian + polaczenie z galezia lokalna 
git branch -r - lista galezi w repozytorium
Usuwanie galezi zdalnej:
git branch -d <branch> - 1. usuwanie galezi lokalnie
git push origin :<branch> 2. usuwanie galezi zdalnie

git init
git clone
git config
git add
git rm
git branch 
git commit
git status
git diff
git log
git reset
git checkout
git pull
git push
git fetch
git merge

-----------------------------------------------------------------------------------------------------------------------------------------------------

Referencja:

- odnosnik zawierajacy hash commitu
- znajduje sie w pliku w katalogu .git
- Dostepne referencje:
	- nazwa galezi - wskazuje na commit znajdujacy sie na "czubku" (tip) - jest to ostatni dodany commit
	- etykieta (tag) - wskazuje na commit, do ktorego zostala przypieta etykieta
	- remote - wskazuje na commit w zdalnym repozytorium
	- naglowek (HEAD) - wskazuje na commit na ktorym aktualnie pracujemy
	
Rodzje referencji: 
1. bezposrednia 
			cat head/master
			6862amnjsfn2356dnhsgfnhj141575afca
2. symboliczna:	
			cat remotes/origin/HEAD
			ref: refs/remotes/orgin/master
			
Naglowek (HEAD)

- Referencja symboliczna: cat .git/HEAD
			   ref: refs/heads/master
			   
- wskazuje na referencje, na ktorej pracuje w danej chwili:
	- ostatni commit galezi - git checkout <galaz>
	- konkretny hash commitu - git checkout <tag> lub git checkout <commit> (detached mode)
	
HEAD - referencja:
- przez HEAD mozna odwolywac sie do rodzicow commita:
	- HEAD~n - cofniecie o n commitow
	- HEAD^x - cofniecie do rodzica nr x
	
git checkout <commit> - przelacza naglowek na wybrany commit
git checkout <referencja> - przelacza naglowek na wybrana referencje
git merge - laczy galezie; tworzy nowy commit z 2 rodzicami; odtwarza po kolei dokonane zmiany z dolaczanej galezi

MERGE

git merge - fast forward:
- gdy galezie sie nie rozdzielaja, git merge uzyje "fast-forward" i nie utworzy nowego commitu
- gdy na galezi, do ktorej dociagamy zmiany powstaja commity, zostanie utworzony nowy commit z 2 rodzicami


git merge --no-ff - wylaczenie "fast-forward". zawsze nowy commit po merge
git merge --no-commit - wylaczenie automatycznego tworzenia commitu, zadziala jedynie kiedy ma zostac stworzony nowy commit (nie zadziala gdy uaktywni sie "fast-forward")
git merge --no-commit --no-ff - zmiany dodane jedynie na poziomie stagingu

Merge conflict - 

REBASE

rebase:
- sluzy do laczenia ze soba galezi
- tworzy nowe commity z rodzicem, na ktory wskazuje HEAD 
- odtwarza po kolei zmiany dokonane na dolaczanej galezi
- usuwa dolaczana galaz

Merge vs Rebase

- Merge Commit - Tworzony jest jeden nowy commit; stare commity nie zostaja zmienione
- Brand New Commit - Tworzone jest tyle nowych commitow , ile dolaczanej galezi; stare commity sa usuwane.


RESET

reset - odrzuca zmiany dokonane w wybranym obszarze repozytorium (working directory, staging, commit history) pod wzgledem wybranej referencji lub commita

- git reset <ref><plik> - przywraca stan stagingu wzgledem wybranej referencji lub commita. Domyslnie <ref>=HEAD

git reset 
--soft 	 	odrzuca zmiany w git directory (odwrotność git commit)
--mixed* 	--soft + odrzuca zmiany w staging (odwrotność git add)
--hard 	 	--mixed + odrzuca zmiany w katalogu roboczym
--mixed* 	odrzuca plik ze stagingu


git checkout <ref> <plik> - przywraca plik wzgledem wybranej referencji lub commita. Domyslnie <ref> = HEAD !!Nadpisuje zmiany dokonane w folderze roboczym!!

REVERT

revert:
- tworzy nowy commit, ktory odwraca zmiany dokonane w wybranym commicie
- uzyteczny, gdy chcemy zachowac historie zmian – np. przy wspolnej pracy na jednej galezi lub pomiedzy wersjami

git reset vs revert:
- revert - tworzy nowy commit, ktorego rodzicem jest HEAD
- reset - usuwa wszystkie commity od HEAD do wybranego commita

Reset, Checkout, Revert - zastosowanie

git reset 	 Odrzucenie zmian ze stagingu, commit history lub katalogu roboczego
git reset 	 Odrzucenie pliku dodanego do stagingu
git checkout 	 Przejście pomiędzy commitami lub referencjami
git checkout 	 Odrzucenie zmian w katalogu roboczym w pojedynczym pliku
git revert 	 Cofnięcie zmian dodanych do repozytorium zdalnego

-----------------------------------------------------------------------------------------------------------------------------------------------------

ZDALNE REPOZYTORIA:

remote - zdalne repozytorium; mozna laczyc sie jednoczesnie
origin - domyslna nazwa repozytorium, z ktorego dociagane sa zmiany; tworzona przy git clone
upstream - galaz w zdalnym repozytorium, ktora jest powiazana z galezia w repozytorium lokalnym 
downstream - galaz w repozytorium lokalnym dla powiazanej galezi w repozytorium zdalnym (relacja jak wyzej z punktu widzenia zdalnego repozytorium)

Komendy:

git remote add - ddoawanie nowego zdalnego repozytorium
git remote rm - usuwanie zdalnego repozytorium
git remote rename - zmien nazwe zapisanemu zdalnemu repozytorium
git remote -v - wyswietl zapisane zdalne repozytoria

Podstawowe pliki w repo:

.gitignore - lista plikow, ktore git powinien ingorowac
LICENCE - licencja
README.md (.rst) - plik z instrukcja obslugi/opisem tego, co znajduje sie w repozytorium
CHANGELOG.md - lista zmian w projekcie

.gitignore
Lista ignorowanych plikow:
- dotyczy jedynie plikow, ktore nie byly dotad sledzone;
- uzywa wzorca prawie identycznego do znakow globalnych 
- lista czytana jest od gory do dolu; ostatni wpis nadpisuje poprzednie 
- sciezki plikow (w kolejnosci czytania - nizsze nadpisuje wyzsze):
	- plik wskazany przez core.excludesFile w .gitconfig
	- plik w repozytorium: .git/info/exclude
	- plik w repozytorium: .gitignore
	
* - zastepuje dowolny ciag znakow; w sciezce - bez podkatalogow
** - zastepuje dowolny ciag znakow; w sciezce - rowniez podkatalogi
? - zastepuje pojdeynczy znak dowolnym znakiem
! - negacja wyrazenia
[abc] - zastepuje pojedynczy znak znakiem a,b lub c
[a-z] - zastepuje pojedynczy znak mala litera alfabetu
\ - Esc, pozwala na uzycie danego znaku "doslownie"
/ - koniec nazwy katalogu

Wzorce moga byc tez uzywane zamiennie do nazw plikow i katalogow np. przy git add.

Dodawanie wszystkich zmian:
- git add * - rozwija * poprzez shell i dodaje wszystkie pliki i foldery w biezacym katalogu; dodaje rowniez pliki niesledzone; nie dodaje plikow ukrytych
- git add . - znak "." wskazuje na katalog, w ktorym sie znajdujemy, ktory nie jest w zaden sposob rozwijany; nie dodaje plikow sledzonych; dodaje pliki ukryte







