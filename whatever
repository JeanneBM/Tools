

To redirect, for example, port 8080 of my computer, from any source, to port 80 of a container that uses the nginx:alpine image, I just have to run:
docker run -d -p 8080:80 nginx:alpine

<server>
<id>snapshots</id>
<username>deployment</username>
<password>deployment</password>
</server>

1. docker rm -f $(docker ps -aq)(edited)

1
[5:46 PM]
2. mkdir final (bedac w katalogu /home/panda)
[5:47 PM]
3. cd final
[5:48 PM]
4. Klonujemy 3 repozytoria - panda_env, panda_application, wasze własne
[5:51 PM]
5. cd panda_application/
[5:51 PM]
6.  git checkout feature/pipeline
[5:52 PM]
7. cd .. cd <projektowe>  git checkout -b feature/final
[5:58 PM]
8. W repozytorium <projektowym>: rm -rf *
9.  cd .. cd panda_application git status -> sprawdzamy czy jestesmy na galezi feature/pipeline(edited)
[6:00 PM]
10. Wewnątrz panda_applcation: cp -r * ../<projektowe>/
[6:01 PM]
11. cd .. cd <projektowe> git status
[6:01 PM]
12 git add . git commit -m "pipeline"
[6:02 PM]
13 git push --set-upstream origin feature/final
[6:06 PM]
14 cd .. cd  panda_env
[6:07 PM]
15 edytujemy plik start.sh i dodajemy wewnątrz: chown 1000:1000 -R volumes/jenkins/ (przed cd compose)

MonikaToday at 6:19 PM
Bateria.. zaraz wracam

Krzysiek_SToday at 6:23 PM
16. sudo su (wchodzimy na roota), a następnie ./start.sh
NEW

Krzysiek_SToday at 7:12 PM
--------------
[7:13 PM]
1. uruchamiamy exporty
2. dodajemy do docker-compose 
3. Wchodzimy do panda_env i odpalamy start.sh
4. docker exec -it ubuntucompose bash a nastepnie env i sprawdzamy czy sie dodało

https://github.com/PandaAcademy/panda_application -> branch feature/pipeline
https://github.com/PandaAcademy/panda_env

----
[7:26 PM]
1. Tworzymy katalog infrastructure
[7:26 PM]
2. Klonujemy repozytoria bedąc wewnątrz katalogu infrastructure
[7:27 PM]
3. Usuwamy w obu katalogach katalog .git (rm -rf .git)

[local]
localhost

[aws]
${ansible_ip}

[aws:vars]
ansible_user=ubuntu
ansible_ssh_private_key_file=../panda.pem
ansible_ssh_common_args='-o StrictHostKeyChecking=no'

1. Ansible playbook.yml -> wklejamy z prezentacji
2. Zmieniamy adres w ansible/panda/defaults/main.yml na 192.168.44.44

pipeline {
  agent {
    label 'Slave'
  }
  
  tools {
    terraform 'Terraform'
  }
  environment {
    ANSIBLE = tool name: 'Ansible', type:
'com.cloudbees.jenkins.plugins.customtools
.CustomTool'
  }

  stages {
    stage('Test installation') {
      steps {
        sh 'terraform --version'
        sh 'ansible --version'
       }
     }
   }
}


export AWS_ACCESS_KEY_ID=<AWS_KEY_ID>
export AWS_SECRET_ACCESS_KEY=<AWS_KEY>

ubuntu_slave:
depends_on:
- jenkins
container_name: ubuntucompose
environment:
- AWS_ACCESS_KEY_ID=$AWS_ACCESS_KEY_ID
- AWS_SECRET_ACCESS_KEY=$AWS_SECRET_ACCESS_KEY
volumes:
- /var/run/docker.sock:/var/run/docker.sock
build:
context: ../dockerfiles/slave/
command: java -jar agent.jar (...)
networks:
- docker_network

88888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888

pipeline {
    agent {
        label 'Slave'
    }
    tools {
        // Install the Maven version configured as "M3" and add it to the path.
        maven "M3"
        terraform 'Terraform'
    }
    environment {
        IMAGE = readMavenPom().getArtifactId()
        VERSION = readMavenPom().getVersion()
        ANSIBLE = tool name: 'Ansible', type: 'com.cloudbees.jenkins.plugins.customtools.CustomTool'
    }
  
    stages {
        stage('Clear running apps') {
           steps {
               // Clear previous instances of app built
               sh 'docker rm -f pandaapp || true'
           }
        }
        stage('Get Code') {
            steps {
                // Get some code from a GitHub repository
                checkout scm
            }
        }
        stage('Build and Junit') {
            steps {
                // Run Maven on a Unix agent.
                sh "mvn clean install"
            }
        }
        stage('Build Docker image'){
            steps {
                sh "mvn package -Pdocker"
            }
        }
        stage('Run Docker app') {
            steps {
                sh "docker run -d -p 0.0.0.0:8080:8080 --name pandaapp -t ${IMAGE}:${VERSION}"
            }
        }
        stage('Test Selenium') {
            steps {
                sh "mvn test -Pselenium"
            }
        }
        stage('Deploy jar to artifactory') {
            steps {
                configFileProvider([configFile(fileId: '9d1ed313-ea70-4fa9-9934-7108c53eca75', variable: 'MAVEN_GLOBAL_SETTINGS')]) {
                    sh "mvn -gs $MAVEN_GLOBAL_SETTINGS deploy -Dmaven.test.skip=true -e"
                }
            } 
        }
        stage('Run terraform') {
            steps {
                dir('infrastructure/terraform') {                
                    sh 'terraform init && terraform apply -var-file ./example.tfvars -auto-approve '
                } 
            }
        }
        stage('Copy Ansible role') {
               steps {
                   sh 'cp -r infrastructure/ansible/panda/ /etc/ansible/roles/'
                }
        }
        stage('Run Ansible') {
               steps {
                dir('infrastructure/ansible') {                
                    sh 'chmod 600 ../panda.pem'
                    sh 'ansible-playbook -i ./inventory playbook.yml'
                } 
            }
        }
    }
    post { 
        always { 
            sh 'docker stop pandaapp'
            deleteDir()
        }
    }
}
